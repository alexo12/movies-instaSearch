{"ast":null,"code":"/*! algoliasearch.umd.js | 4.13.0 | Â© Algolia, inc. | https://github.com/algolia/algoliasearch-client-javascript */\n!function (t, e) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? module.exports = e() : \"function\" == typeof define && define.amd ? define(e) : (t = t || self).algoliasearch = e();\n}(this, function () {\n  \"use strict\";\n\n  function t(t, e, r) {\n    return e in t ? Object.defineProperty(t, e, {\n      value: r,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : t[e] = r, t;\n  }\n\n  function e(t, e) {\n    var r = Object.keys(t);\n\n    if (Object.getOwnPropertySymbols) {\n      var n = Object.getOwnPropertySymbols(t);\n      e && (n = n.filter(function (e) {\n        return Object.getOwnPropertyDescriptor(t, e).enumerable;\n      })), r.push.apply(r, n);\n    }\n\n    return r;\n  }\n\n  function r(r) {\n    for (var n = 1; n < arguments.length; n++) {\n      var a = null != arguments[n] ? arguments[n] : {};\n      n % 2 ? e(Object(a), !0).forEach(function (e) {\n        t(r, e, a[e]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(r, Object.getOwnPropertyDescriptors(a)) : e(Object(a)).forEach(function (t) {\n        Object.defineProperty(r, t, Object.getOwnPropertyDescriptor(a, t));\n      });\n    }\n\n    return r;\n  }\n\n  function n(t, e) {\n    if (null == t) return {};\n\n    var r,\n        n,\n        a = function (t, e) {\n      if (null == t) return {};\n      var r,\n          n,\n          a = {},\n          o = Object.keys(t);\n\n      for (n = 0; n < o.length; n++) {\n        r = o[n], e.indexOf(r) >= 0 || (a[r] = t[r]);\n      }\n\n      return a;\n    }(t, e);\n\n    if (Object.getOwnPropertySymbols) {\n      var o = Object.getOwnPropertySymbols(t);\n\n      for (n = 0; n < o.length; n++) {\n        r = o[n], e.indexOf(r) >= 0 || Object.prototype.propertyIsEnumerable.call(t, r) && (a[r] = t[r]);\n      }\n    }\n\n    return a;\n  }\n\n  function a(t, e) {\n    return function (t) {\n      if (Array.isArray(t)) return t;\n    }(t) || function (t, e) {\n      if (!(Symbol.iterator in Object(t) || \"[object Arguments]\" === Object.prototype.toString.call(t))) return;\n      var r = [],\n          n = !0,\n          a = !1,\n          o = void 0;\n\n      try {\n        for (var i, u = t[Symbol.iterator](); !(n = (i = u.next()).done) && (r.push(i.value), !e || r.length !== e); n = !0) {\n          ;\n        }\n      } catch (t) {\n        a = !0, o = t;\n      } finally {\n        try {\n          n || null == u.return || u.return();\n        } finally {\n          if (a) throw o;\n        }\n      }\n\n      return r;\n    }(t, e) || function () {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }();\n  }\n\n  function o(t) {\n    return function (t) {\n      if (Array.isArray(t)) {\n        for (var e = 0, r = new Array(t.length); e < t.length; e++) {\n          r[e] = t[e];\n        }\n\n        return r;\n      }\n    }(t) || function (t) {\n      if (Symbol.iterator in Object(t) || \"[object Arguments]\" === Object.prototype.toString.call(t)) return Array.from(t);\n    }(t) || function () {\n      throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n    }();\n  }\n\n  function i(t) {\n    var e,\n        r = \"algoliasearch-client-js-\".concat(t.key),\n        n = function n() {\n      return void 0 === e && (e = t.localStorage || window.localStorage), e;\n    },\n        o = function o() {\n      return JSON.parse(n().getItem(r) || \"{}\");\n    };\n\n    return {\n      get: function get(t, e) {\n        var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {\n          miss: function miss() {\n            return Promise.resolve();\n          }\n        };\n        return Promise.resolve().then(function () {\n          var r = JSON.stringify(t),\n              n = o()[r];\n          return Promise.all([n || e(), void 0 !== n]);\n        }).then(function (t) {\n          var e = a(t, 2),\n              n = e[0],\n              o = e[1];\n          return Promise.all([n, o || r.miss(n)]);\n        }).then(function (t) {\n          return a(t, 1)[0];\n        });\n      },\n      set: function set(t, e) {\n        return Promise.resolve().then(function () {\n          var a = o();\n          return a[JSON.stringify(t)] = e, n().setItem(r, JSON.stringify(a)), e;\n        });\n      },\n      delete: function _delete(t) {\n        return Promise.resolve().then(function () {\n          var e = o();\n          delete e[JSON.stringify(t)], n().setItem(r, JSON.stringify(e));\n        });\n      },\n      clear: function clear() {\n        return Promise.resolve().then(function () {\n          n().removeItem(r);\n        });\n      }\n    };\n  }\n\n  function u(t) {\n    var e = o(t.caches),\n        r = e.shift();\n    return void 0 === r ? {\n      get: function get(t, e) {\n        var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {\n          miss: function miss() {\n            return Promise.resolve();\n          }\n        },\n            n = e();\n        return n.then(function (t) {\n          return Promise.all([t, r.miss(t)]);\n        }).then(function (t) {\n          return a(t, 1)[0];\n        });\n      },\n      set: function set(t, e) {\n        return Promise.resolve(e);\n      },\n      delete: function _delete(t) {\n        return Promise.resolve();\n      },\n      clear: function clear() {\n        return Promise.resolve();\n      }\n    } : {\n      get: function get(t, n) {\n        var a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {\n          miss: function miss() {\n            return Promise.resolve();\n          }\n        };\n        return r.get(t, n, a).catch(function () {\n          return u({\n            caches: e\n          }).get(t, n, a);\n        });\n      },\n      set: function set(t, n) {\n        return r.set(t, n).catch(function () {\n          return u({\n            caches: e\n          }).set(t, n);\n        });\n      },\n      delete: function _delete(t) {\n        return r.delete(t).catch(function () {\n          return u({\n            caches: e\n          }).delete(t);\n        });\n      },\n      clear: function clear() {\n        return r.clear().catch(function () {\n          return u({\n            caches: e\n          }).clear();\n        });\n      }\n    };\n  }\n\n  function s() {\n    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {\n      serializable: !0\n    },\n        e = {};\n    return {\n      get: function get(r, n) {\n        var a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {\n          miss: function miss() {\n            return Promise.resolve();\n          }\n        },\n            o = JSON.stringify(r);\n        if (o in e) return Promise.resolve(t.serializable ? JSON.parse(e[o]) : e[o]);\n\n        var i = n(),\n            u = a && a.miss || function () {\n          return Promise.resolve();\n        };\n\n        return i.then(function (t) {\n          return u(t);\n        }).then(function () {\n          return i;\n        });\n      },\n      set: function set(r, n) {\n        return e[JSON.stringify(r)] = t.serializable ? JSON.stringify(n) : n, Promise.resolve(n);\n      },\n      delete: function _delete(t) {\n        return delete e[JSON.stringify(t)], Promise.resolve();\n      },\n      clear: function clear() {\n        return e = {}, Promise.resolve();\n      }\n    };\n  }\n\n  function c(t, e, r) {\n    var n = {\n      \"x-algolia-api-key\": r,\n      \"x-algolia-application-id\": e\n    };\n    return {\n      headers: function headers() {\n        return t === m.WithinHeaders ? n : {};\n      },\n      queryParameters: function queryParameters() {\n        return t === m.WithinQueryParameters ? n : {};\n      }\n    };\n  }\n\n  function f(t) {\n    var e = 0;\n    return t(function r() {\n      return e++, new Promise(function (n) {\n        setTimeout(function () {\n          n(t(r));\n        }, Math.min(100 * e, 1e3));\n      });\n    });\n  }\n\n  function d(t) {\n    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : function (t, e) {\n      return Promise.resolve();\n    };\n    return Object.assign(t, {\n      wait: function wait(r) {\n        return d(t.then(function (t) {\n          return Promise.all([e(t, r), t]);\n        }).then(function (t) {\n          return t[1];\n        }));\n      }\n    });\n  }\n\n  function l(t) {\n    for (var e = t.length - 1; e > 0; e--) {\n      var r = Math.floor(Math.random() * (e + 1)),\n          n = t[e];\n      t[e] = t[r], t[r] = n;\n    }\n\n    return t;\n  }\n\n  function p(t, e) {\n    return e ? (Object.keys(e).forEach(function (r) {\n      t[r] = e[r](t);\n    }), t) : t;\n  }\n\n  function h(t) {\n    for (var e = arguments.length, r = new Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++) {\n      r[n - 1] = arguments[n];\n    }\n\n    var a = 0;\n    return t.replace(/%s/g, function () {\n      return encodeURIComponent(r[a++]);\n    });\n  }\n\n  var m = {\n    WithinQueryParameters: 0,\n    WithinHeaders: 1\n  };\n\n  function y(t, e) {\n    var r = t || {},\n        n = r.data || {};\n    return Object.keys(r).forEach(function (t) {\n      -1 === [\"timeout\", \"headers\", \"queryParameters\", \"data\", \"cacheable\"].indexOf(t) && (n[t] = r[t]);\n    }), {\n      data: Object.entries(n).length > 0 ? n : void 0,\n      timeout: r.timeout || e,\n      headers: r.headers || {},\n      queryParameters: r.queryParameters || {},\n      cacheable: r.cacheable\n    };\n  }\n\n  var g = {\n    Read: 1,\n    Write: 2,\n    Any: 3\n  },\n      v = 1,\n      b = 2,\n      P = 3;\n\n  function w(t) {\n    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : v;\n    return r(r({}, t), {}, {\n      status: e,\n      lastUpdate: Date.now()\n    });\n  }\n\n  function O(t) {\n    return \"string\" == typeof t ? {\n      protocol: \"https\",\n      url: t,\n      accept: g.Any\n    } : {\n      protocol: t.protocol || \"https\",\n      url: t.url,\n      accept: t.accept || g.Any\n    };\n  }\n\n  var I = \"DELETE\",\n      x = \"GET\",\n      j = \"POST\",\n      D = \"PUT\";\n\n  function q(t, e) {\n    return Promise.all(e.map(function (e) {\n      return t.get(e, function () {\n        return Promise.resolve(w(e));\n      });\n    })).then(function (t) {\n      var r = t.filter(function (t) {\n        return function (t) {\n          return t.status === v || Date.now() - t.lastUpdate > 12e4;\n        }(t);\n      }),\n          n = t.filter(function (t) {\n        return function (t) {\n          return t.status === P && Date.now() - t.lastUpdate <= 12e4;\n        }(t);\n      }),\n          a = [].concat(o(r), o(n));\n      return {\n        getTimeout: function getTimeout(t, e) {\n          return (0 === n.length && 0 === t ? 1 : n.length + 3 + t) * e;\n        },\n        statelessHosts: a.length > 0 ? a.map(function (t) {\n          return O(t);\n        }) : e\n      };\n    });\n  }\n\n  function S(t, e, n, a) {\n    var i = [],\n        u = function (t, e) {\n      if (t.method === x || void 0 === t.data && void 0 === e.data) return;\n      var n = Array.isArray(t.data) ? t.data : r(r({}, t.data), e.data);\n      return JSON.stringify(n);\n    }(n, a),\n        s = function (t, e) {\n      var n = r(r({}, t.headers), e.headers),\n          a = {};\n      return Object.keys(n).forEach(function (t) {\n        var e = n[t];\n        a[t.toLowerCase()] = e;\n      }), a;\n    }(t, a),\n        c = n.method,\n        f = n.method !== x ? {} : r(r({}, n.data), a.data),\n        d = r(r(r({\n      \"x-algolia-agent\": t.userAgent.value\n    }, t.queryParameters), f), a.queryParameters),\n        l = 0,\n        p = function e(r, o) {\n      var f = r.pop();\n      if (void 0 === f) throw {\n        name: \"RetryError\",\n        message: \"Unreachable hosts - your application id may be incorrect. If the error persists, contact support@algolia.com.\",\n        transporterStackTrace: R(i)\n      };\n\n      var p = {\n        data: u,\n        headers: s,\n        method: c,\n        url: N(f, n.path, d),\n        connectTimeout: o(l, t.timeouts.connect),\n        responseTimeout: o(l, a.timeout)\n      },\n          h = function h(t) {\n        var e = {\n          request: p,\n          response: t,\n          host: f,\n          triesLeft: r.length\n        };\n        return i.push(e), e;\n      },\n          m = {\n        onSuccess: function onSuccess(t) {\n          return function (t) {\n            try {\n              return JSON.parse(t.content);\n            } catch (e) {\n              throw function (t, e) {\n                return {\n                  name: \"DeserializationError\",\n                  message: t,\n                  response: e\n                };\n              }(e.message, t);\n            }\n          }(t);\n        },\n        onRetry: function onRetry(n) {\n          var a = h(n);\n          return n.isTimedOut && l++, Promise.all([t.logger.info(\"Retryable failure\", A(a)), t.hostsCache.set(f, w(f, n.isTimedOut ? P : b))]).then(function () {\n            return e(r, o);\n          });\n        },\n        onFail: function onFail(t) {\n          throw h(t), function (t, e) {\n            var r = t.content,\n                n = t.status,\n                a = r;\n\n            try {\n              a = JSON.parse(r).message;\n            } catch (t) {}\n\n            return function (t, e, r) {\n              return {\n                name: \"ApiError\",\n                message: t,\n                status: e,\n                transporterStackTrace: r\n              };\n            }(a, n, e);\n          }(t, R(i));\n        }\n      };\n\n      return t.requester.send(p).then(function (t) {\n        return function (t, e) {\n          return function (t) {\n            var e = t.status;\n            return t.isTimedOut || function (t) {\n              var e = t.isTimedOut,\n                  r = t.status;\n              return !e && 0 == ~~r;\n            }(t) || 2 != ~~(e / 100) && 4 != ~~(e / 100);\n          }(t) ? e.onRetry(t) : 2 == ~~(t.status / 100) ? e.onSuccess(t) : e.onFail(t);\n        }(t, m);\n      });\n    };\n\n    return q(t.hostsCache, e).then(function (t) {\n      return p(o(t.statelessHosts).reverse(), t.getTimeout);\n    });\n  }\n\n  function k(t) {\n    var e = t.hostsCache,\n        r = t.logger,\n        n = t.requester,\n        o = t.requestsCache,\n        i = t.responsesCache,\n        u = t.timeouts,\n        s = t.userAgent,\n        c = t.hosts,\n        f = t.queryParameters,\n        d = {\n      hostsCache: e,\n      logger: r,\n      requester: n,\n      requestsCache: o,\n      responsesCache: i,\n      timeouts: u,\n      userAgent: s,\n      headers: t.headers,\n      queryParameters: f,\n      hosts: c.map(function (t) {\n        return O(t);\n      }),\n      read: function read(t, e) {\n        var r = y(e, d.timeouts.read),\n            n = function n() {\n          return S(d, d.hosts.filter(function (t) {\n            return 0 != (t.accept & g.Read);\n          }), t, r);\n        };\n\n        if (!0 !== (void 0 !== r.cacheable ? r.cacheable : t.cacheable)) return n();\n        var o = {\n          request: t,\n          mappedRequestOptions: r,\n          transporter: {\n            queryParameters: d.queryParameters,\n            headers: d.headers\n          }\n        };\n        return d.responsesCache.get(o, function () {\n          return d.requestsCache.get(o, function () {\n            return d.requestsCache.set(o, n()).then(function (t) {\n              return Promise.all([d.requestsCache.delete(o), t]);\n            }, function (t) {\n              return Promise.all([d.requestsCache.delete(o), Promise.reject(t)]);\n            }).then(function (t) {\n              var e = a(t, 2);\n              e[0];\n              return e[1];\n            });\n          });\n        }, {\n          miss: function miss(t) {\n            return d.responsesCache.set(o, t);\n          }\n        });\n      },\n      write: function write(t, e) {\n        return S(d, d.hosts.filter(function (t) {\n          return 0 != (t.accept & g.Write);\n        }), t, y(e, d.timeouts.write));\n      }\n    };\n    return d;\n  }\n\n  function T(t) {\n    var e = {\n      value: \"Algolia for JavaScript (\".concat(t, \")\"),\n      add: function add(t) {\n        var r = \"; \".concat(t.segment).concat(void 0 !== t.version ? \" (\".concat(t.version, \")\") : \"\");\n        return -1 === e.value.indexOf(r) && (e.value = \"\".concat(e.value).concat(r)), e;\n      }\n    };\n    return e;\n  }\n\n  function N(t, e, r) {\n    var n = E(r),\n        a = \"\".concat(t.protocol, \"://\").concat(t.url, \"/\").concat(\"/\" === e.charAt(0) ? e.substr(1) : e);\n    return n.length && (a += \"?\".concat(n)), a;\n  }\n\n  function E(t) {\n    return Object.keys(t).map(function (e) {\n      return h(\"%s=%s\", e, (r = t[e], \"[object Object]\" === Object.prototype.toString.call(r) || \"[object Array]\" === Object.prototype.toString.call(r) ? JSON.stringify(t[e]) : t[e]));\n      var r;\n    }).join(\"&\");\n  }\n\n  function R(t) {\n    return t.map(function (t) {\n      return A(t);\n    });\n  }\n\n  function A(t) {\n    var e = t.request.headers[\"x-algolia-api-key\"] ? {\n      \"x-algolia-api-key\": \"*****\"\n    } : {};\n    return r(r({}, t), {}, {\n      request: r(r({}, t.request), {}, {\n        headers: r(r({}, t.request.headers), e)\n      })\n    });\n  }\n\n  var C = function C(t) {\n    return function (e, r) {\n      return t.transporter.write({\n        method: j,\n        path: \"2/abtests\",\n        data: e\n      }, r);\n    };\n  },\n      U = function U(t) {\n    return function (e, r) {\n      return t.transporter.write({\n        method: I,\n        path: h(\"2/abtests/%s\", e)\n      }, r);\n    };\n  },\n      z = function z(t) {\n    return function (e, r) {\n      return t.transporter.read({\n        method: x,\n        path: h(\"2/abtests/%s\", e)\n      }, r);\n    };\n  },\n      J = function J(t) {\n    return function (e) {\n      return t.transporter.read({\n        method: x,\n        path: \"2/abtests\"\n      }, e);\n    };\n  },\n      F = function F(t) {\n    return function (e, r) {\n      return t.transporter.write({\n        method: j,\n        path: h(\"2/abtests/%s/stop\", e)\n      }, r);\n    };\n  },\n      H = function H(t) {\n    return function (e) {\n      return t.transporter.read({\n        method: x,\n        path: \"1/strategies/personalization\"\n      }, e);\n    };\n  },\n      M = function M(t) {\n    return function (e, r) {\n      return t.transporter.write({\n        method: j,\n        path: \"1/strategies/personalization\",\n        data: e\n      }, r);\n    };\n  };\n\n  function K(t) {\n    return function e(r) {\n      return t.request(r).then(function (n) {\n        if (void 0 !== t.batch && t.batch(n.hits), !t.shouldStop(n)) return n.cursor ? e({\n          cursor: n.cursor\n        }) : e({\n          page: (r.page || 0) + 1\n        });\n      });\n    }({});\n  }\n\n  var W = function W(t) {\n    return function (e, a) {\n      var o = a || {},\n          i = o.queryParameters,\n          u = n(o, [\"queryParameters\"]),\n          s = r({\n        acl: e\n      }, void 0 !== i ? {\n        queryParameters: i\n      } : {});\n      return d(t.transporter.write({\n        method: j,\n        path: \"1/keys\",\n        data: s\n      }, u), function (e, r) {\n        return f(function (n) {\n          return tt(t)(e.key, r).catch(function (t) {\n            if (404 !== t.status) throw t;\n            return n();\n          });\n        });\n      });\n    };\n  },\n      B = function B(t) {\n    return function (e, r, n) {\n      var a = y(n);\n      return a.queryParameters[\"X-Algolia-User-ID\"] = e, t.transporter.write({\n        method: j,\n        path: \"1/clusters/mapping\",\n        data: {\n          cluster: r\n        }\n      }, a);\n    };\n  },\n      Q = function Q(t) {\n    return function (e, r, n) {\n      return t.transporter.write({\n        method: j,\n        path: \"1/clusters/mapping/batch\",\n        data: {\n          users: e,\n          cluster: r\n        }\n      }, n);\n    };\n  },\n      G = function G(t) {\n    return function (e, r) {\n      return d(t.transporter.write({\n        method: j,\n        path: h(\"/1/dictionaries/%s/batch\", e),\n        data: {\n          clearExistingDictionaryEntries: !0,\n          requests: {\n            action: \"addEntry\",\n            body: []\n          }\n        }\n      }, r), function (e, r) {\n        return jt(t)(e.taskID, r);\n      });\n    };\n  },\n      L = function L(t) {\n    return function (e, r, n) {\n      return d(t.transporter.write({\n        method: j,\n        path: h(\"1/indexes/%s/operation\", e),\n        data: {\n          operation: \"copy\",\n          destination: r\n        }\n      }, n), function (r, n) {\n        return ut(t)(e, {\n          methods: {\n            waitTask: de\n          }\n        }).waitTask(r.taskID, n);\n      });\n    };\n  },\n      V = function V(t) {\n    return function (e, n, a) {\n      return L(t)(e, n, r(r({}, a), {}, {\n        scope: [pe.Rules]\n      }));\n    };\n  },\n      _ = function _(t) {\n    return function (e, n, a) {\n      return L(t)(e, n, r(r({}, a), {}, {\n        scope: [pe.Settings]\n      }));\n    };\n  },\n      X = function X(t) {\n    return function (e, n, a) {\n      return L(t)(e, n, r(r({}, a), {}, {\n        scope: [pe.Synonyms]\n      }));\n    };\n  },\n      Y = function Y(t) {\n    return function (e, r) {\n      return e.method === x ? t.transporter.read(e, r) : t.transporter.write(e, r);\n    };\n  },\n      Z = function Z(t) {\n    return function (e, r) {\n      return d(t.transporter.write({\n        method: I,\n        path: h(\"1/keys/%s\", e)\n      }, r), function (r, n) {\n        return f(function (r) {\n          return tt(t)(e, n).then(r).catch(function (t) {\n            if (404 !== t.status) throw t;\n          });\n        });\n      });\n    };\n  },\n      $ = function $(t) {\n    return function (e, r, n) {\n      var a = r.map(function (t) {\n        return {\n          action: \"deleteEntry\",\n          body: {\n            objectID: t\n          }\n        };\n      });\n      return d(t.transporter.write({\n        method: j,\n        path: h(\"/1/dictionaries/%s/batch\", e),\n        data: {\n          clearExistingDictionaryEntries: !1,\n          requests: a\n        }\n      }, n), function (e, r) {\n        return jt(t)(e.taskID, r);\n      });\n    };\n  },\n      tt = function tt(t) {\n    return function (e, r) {\n      return t.transporter.read({\n        method: x,\n        path: h(\"1/keys/%s\", e)\n      }, r);\n    };\n  },\n      et = function et(t) {\n    return function (e, r) {\n      return t.transporter.read({\n        method: x,\n        path: h(\"1/task/%s\", e.toString())\n      }, r);\n    };\n  },\n      rt = function rt(t) {\n    return function (e) {\n      return t.transporter.read({\n        method: x,\n        path: \"/1/dictionaries/*/settings\"\n      }, e);\n    };\n  },\n      nt = function nt(t) {\n    return function (e) {\n      return t.transporter.read({\n        method: x,\n        path: \"1/logs\"\n      }, e);\n    };\n  },\n      at = function at(t) {\n    return function (e) {\n      return t.transporter.read({\n        method: x,\n        path: \"1/clusters/mapping/top\"\n      }, e);\n    };\n  },\n      ot = function ot(t) {\n    return function (e, r) {\n      return t.transporter.read({\n        method: x,\n        path: h(\"1/clusters/mapping/%s\", e)\n      }, r);\n    };\n  },\n      it = function it(t) {\n    return function (e) {\n      var r = e || {},\n          a = r.retrieveMappings,\n          o = n(r, [\"retrieveMappings\"]);\n      return !0 === a && (o.getClusters = !0), t.transporter.read({\n        method: x,\n        path: \"1/clusters/mapping/pending\"\n      }, o);\n    };\n  },\n      ut = function ut(t) {\n    return function (e) {\n      var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n          n = {\n        transporter: t.transporter,\n        appId: t.appId,\n        indexName: e\n      };\n      return p(n, r.methods);\n    };\n  },\n      st = function st(t) {\n    return function (e) {\n      return t.transporter.read({\n        method: x,\n        path: \"1/keys\"\n      }, e);\n    };\n  },\n      ct = function ct(t) {\n    return function (e) {\n      return t.transporter.read({\n        method: x,\n        path: \"1/clusters\"\n      }, e);\n    };\n  },\n      ft = function ft(t) {\n    return function (e) {\n      return t.transporter.read({\n        method: x,\n        path: \"1/indexes\"\n      }, e);\n    };\n  },\n      dt = function dt(t) {\n    return function (e) {\n      return t.transporter.read({\n        method: x,\n        path: \"1/clusters/mapping\"\n      }, e);\n    };\n  },\n      lt = function lt(t) {\n    return function (e, r, n) {\n      return d(t.transporter.write({\n        method: j,\n        path: h(\"1/indexes/%s/operation\", e),\n        data: {\n          operation: \"move\",\n          destination: r\n        }\n      }, n), function (r, n) {\n        return ut(t)(e, {\n          methods: {\n            waitTask: de\n          }\n        }).waitTask(r.taskID, n);\n      });\n    };\n  },\n      pt = function pt(t) {\n    return function (e, r) {\n      return d(t.transporter.write({\n        method: j,\n        path: \"1/indexes/*/batch\",\n        data: {\n          requests: e\n        }\n      }, r), function (e, r) {\n        return Promise.all(Object.keys(e.taskID).map(function (n) {\n          return ut(t)(n, {\n            methods: {\n              waitTask: de\n            }\n          }).waitTask(e.taskID[n], r);\n        }));\n      });\n    };\n  },\n      ht = function ht(t) {\n    return function (e, r) {\n      return t.transporter.read({\n        method: j,\n        path: \"1/indexes/*/objects\",\n        data: {\n          requests: e\n        }\n      }, r);\n    };\n  },\n      mt = function mt(t) {\n    return function (e, n) {\n      var a = e.map(function (t) {\n        return r(r({}, t), {}, {\n          params: E(t.params || {})\n        });\n      });\n      return t.transporter.read({\n        method: j,\n        path: \"1/indexes/*/queries\",\n        data: {\n          requests: a\n        },\n        cacheable: !0\n      }, n);\n    };\n  },\n      yt = function yt(t) {\n    return function (e, a) {\n      return Promise.all(e.map(function (e) {\n        var o = e.params,\n            i = o.facetName,\n            u = o.facetQuery,\n            s = n(o, [\"facetName\", \"facetQuery\"]);\n        return ut(t)(e.indexName, {\n          methods: {\n            searchForFacetValues: ue\n          }\n        }).searchForFacetValues(i, u, r(r({}, a), s));\n      }));\n    };\n  },\n      gt = function gt(t) {\n    return function (e, r) {\n      var n = y(r);\n      return n.queryParameters[\"X-Algolia-User-ID\"] = e, t.transporter.write({\n        method: I,\n        path: \"1/clusters/mapping\"\n      }, n);\n    };\n  },\n      vt = function vt(t) {\n    return function (e, r, n) {\n      var a = r.map(function (t) {\n        return {\n          action: \"addEntry\",\n          body: t\n        };\n      });\n      return d(t.transporter.write({\n        method: j,\n        path: h(\"/1/dictionaries/%s/batch\", e),\n        data: {\n          clearExistingDictionaryEntries: !0,\n          requests: a\n        }\n      }, n), function (e, r) {\n        return jt(t)(e.taskID, r);\n      });\n    };\n  },\n      bt = function bt(t) {\n    return function (e, r) {\n      return d(t.transporter.write({\n        method: j,\n        path: h(\"1/keys/%s/restore\", e)\n      }, r), function (r, n) {\n        return f(function (r) {\n          return tt(t)(e, n).catch(function (t) {\n            if (404 !== t.status) throw t;\n            return r();\n          });\n        });\n      });\n    };\n  },\n      Pt = function Pt(t) {\n    return function (e, r, n) {\n      var a = r.map(function (t) {\n        return {\n          action: \"addEntry\",\n          body: t\n        };\n      });\n      return d(t.transporter.write({\n        method: j,\n        path: h(\"/1/dictionaries/%s/batch\", e),\n        data: {\n          clearExistingDictionaryEntries: !1,\n          requests: a\n        }\n      }, n), function (e, r) {\n        return jt(t)(e.taskID, r);\n      });\n    };\n  },\n      wt = function wt(t) {\n    return function (e, r, n) {\n      return t.transporter.read({\n        method: j,\n        path: h(\"/1/dictionaries/%s/search\", e),\n        data: {\n          query: r\n        },\n        cacheable: !0\n      }, n);\n    };\n  },\n      Ot = function Ot(t) {\n    return function (e, r) {\n      return t.transporter.read({\n        method: j,\n        path: \"1/clusters/mapping/search\",\n        data: {\n          query: e\n        }\n      }, r);\n    };\n  },\n      It = function It(t) {\n    return function (e, r) {\n      return d(t.transporter.write({\n        method: D,\n        path: \"/1/dictionaries/*/settings\",\n        data: e\n      }, r), function (e, r) {\n        return jt(t)(e.taskID, r);\n      });\n    };\n  },\n      xt = function xt(t) {\n    return function (e, r) {\n      var a = Object.assign({}, r),\n          o = r || {},\n          i = o.queryParameters,\n          u = n(o, [\"queryParameters\"]),\n          s = i ? {\n        queryParameters: i\n      } : {},\n          c = [\"acl\", \"indexes\", \"referers\", \"restrictSources\", \"queryParameters\", \"description\", \"maxQueriesPerIPPerHour\", \"maxHitsPerQuery\"];\n      return d(t.transporter.write({\n        method: D,\n        path: h(\"1/keys/%s\", e),\n        data: s\n      }, u), function (r, n) {\n        return f(function (r) {\n          return tt(t)(e, n).then(function (t) {\n            return function (t) {\n              return Object.keys(a).filter(function (t) {\n                return -1 !== c.indexOf(t);\n              }).every(function (e) {\n                return t[e] === a[e];\n              });\n            }(t) ? Promise.resolve() : r();\n          });\n        });\n      });\n    };\n  },\n      jt = function jt(t) {\n    return function (e, r) {\n      return f(function (n) {\n        return et(t)(e, r).then(function (t) {\n          return \"published\" !== t.status ? n() : void 0;\n        });\n      });\n    };\n  },\n      Dt = function Dt(t) {\n    return function (e, r) {\n      return d(t.transporter.write({\n        method: j,\n        path: h(\"1/indexes/%s/batch\", t.indexName),\n        data: {\n          requests: e\n        }\n      }, r), function (e, r) {\n        return de(t)(e.taskID, r);\n      });\n    };\n  },\n      qt = function qt(t) {\n    return function (e) {\n      return K(r(r({\n        shouldStop: function shouldStop(t) {\n          return void 0 === t.cursor;\n        }\n      }, e), {}, {\n        request: function request(r) {\n          return t.transporter.read({\n            method: j,\n            path: h(\"1/indexes/%s/browse\", t.indexName),\n            data: r\n          }, e);\n        }\n      }));\n    };\n  },\n      St = function St(t) {\n    return function (e) {\n      var n = r({\n        hitsPerPage: 1e3\n      }, e);\n      return K(r(r({\n        shouldStop: function shouldStop(t) {\n          return t.hits.length < n.hitsPerPage;\n        }\n      }, n), {}, {\n        request: function request(e) {\n          return se(t)(\"\", r(r({}, n), e)).then(function (t) {\n            return r(r({}, t), {}, {\n              hits: t.hits.map(function (t) {\n                return delete t._highlightResult, t;\n              })\n            });\n          });\n        }\n      }));\n    };\n  },\n      kt = function kt(t) {\n    return function (e) {\n      var n = r({\n        hitsPerPage: 1e3\n      }, e);\n      return K(r(r({\n        shouldStop: function shouldStop(t) {\n          return t.hits.length < n.hitsPerPage;\n        }\n      }, n), {}, {\n        request: function request(e) {\n          return ce(t)(\"\", r(r({}, n), e)).then(function (t) {\n            return r(r({}, t), {}, {\n              hits: t.hits.map(function (t) {\n                return delete t._highlightResult, t;\n              })\n            });\n          });\n        }\n      }));\n    };\n  },\n      Tt = function Tt(t) {\n    return function (e, r, a) {\n      var o = a || {},\n          i = o.batchSize,\n          u = n(o, [\"batchSize\"]),\n          s = {\n        taskIDs: [],\n        objectIDs: []\n      };\n      return d(function n() {\n        var a,\n            o = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,\n            c = [];\n\n        for (a = o; a < e.length && (c.push(e[a]), c.length !== (i || 1e3)); a++) {\n          ;\n        }\n\n        return 0 === c.length ? Promise.resolve(s) : Dt(t)(c.map(function (t) {\n          return {\n            action: r,\n            body: t\n          };\n        }), u).then(function (t) {\n          return s.objectIDs = s.objectIDs.concat(t.objectIDs), s.taskIDs.push(t.taskID), a++, n(a);\n        });\n      }(), function (e, r) {\n        return Promise.all(e.taskIDs.map(function (e) {\n          return de(t)(e, r);\n        }));\n      });\n    };\n  },\n      Nt = function Nt(t) {\n    return function (e) {\n      return d(t.transporter.write({\n        method: j,\n        path: h(\"1/indexes/%s/clear\", t.indexName)\n      }, e), function (e, r) {\n        return de(t)(e.taskID, r);\n      });\n    };\n  },\n      Et = function Et(t) {\n    return function (e) {\n      var r = e || {},\n          a = r.forwardToReplicas,\n          o = y(n(r, [\"forwardToReplicas\"]));\n      return a && (o.queryParameters.forwardToReplicas = 1), d(t.transporter.write({\n        method: j,\n        path: h(\"1/indexes/%s/rules/clear\", t.indexName)\n      }, o), function (e, r) {\n        return de(t)(e.taskID, r);\n      });\n    };\n  },\n      Rt = function Rt(t) {\n    return function (e) {\n      var r = e || {},\n          a = r.forwardToReplicas,\n          o = y(n(r, [\"forwardToReplicas\"]));\n      return a && (o.queryParameters.forwardToReplicas = 1), d(t.transporter.write({\n        method: j,\n        path: h(\"1/indexes/%s/synonyms/clear\", t.indexName)\n      }, o), function (e, r) {\n        return de(t)(e.taskID, r);\n      });\n    };\n  },\n      At = function At(t) {\n    return function (e, r) {\n      return d(t.transporter.write({\n        method: j,\n        path: h(\"1/indexes/%s/deleteByQuery\", t.indexName),\n        data: e\n      }, r), function (e, r) {\n        return de(t)(e.taskID, r);\n      });\n    };\n  },\n      Ct = function Ct(t) {\n    return function (e) {\n      return d(t.transporter.write({\n        method: I,\n        path: h(\"1/indexes/%s\", t.indexName)\n      }, e), function (e, r) {\n        return de(t)(e.taskID, r);\n      });\n    };\n  },\n      Ut = function Ut(t) {\n    return function (e, r) {\n      return d(zt(t)([e], r).then(function (t) {\n        return {\n          taskID: t.taskIDs[0]\n        };\n      }), function (e, r) {\n        return de(t)(e.taskID, r);\n      });\n    };\n  },\n      zt = function zt(t) {\n    return function (e, r) {\n      var n = e.map(function (t) {\n        return {\n          objectID: t\n        };\n      });\n      return Tt(t)(n, le.DeleteObject, r);\n    };\n  },\n      Jt = function Jt(t) {\n    return function (e, r) {\n      var a = r || {},\n          o = a.forwardToReplicas,\n          i = y(n(a, [\"forwardToReplicas\"]));\n      return o && (i.queryParameters.forwardToReplicas = 1), d(t.transporter.write({\n        method: I,\n        path: h(\"1/indexes/%s/rules/%s\", t.indexName, e)\n      }, i), function (e, r) {\n        return de(t)(e.taskID, r);\n      });\n    };\n  },\n      Ft = function Ft(t) {\n    return function (e, r) {\n      var a = r || {},\n          o = a.forwardToReplicas,\n          i = y(n(a, [\"forwardToReplicas\"]));\n      return o && (i.queryParameters.forwardToReplicas = 1), d(t.transporter.write({\n        method: I,\n        path: h(\"1/indexes/%s/synonyms/%s\", t.indexName, e)\n      }, i), function (e, r) {\n        return de(t)(e.taskID, r);\n      });\n    };\n  },\n      Ht = function Ht(t) {\n    return function (e) {\n      return Lt(t)(e).then(function () {\n        return !0;\n      }).catch(function (t) {\n        if (404 !== t.status) throw t;\n        return !1;\n      });\n    };\n  },\n      Mt = function Mt(t) {\n    return function (e, r, n) {\n      return t.transporter.read({\n        method: j,\n        path: h(\"1/answers/%s/prediction\", t.indexName),\n        data: {\n          query: e,\n          queryLanguages: r\n        },\n        cacheable: !0\n      }, n);\n    };\n  },\n      Kt = function Kt(t) {\n    return function (e, o) {\n      var i = o || {},\n          u = i.query,\n          s = i.paginate,\n          c = n(i, [\"query\", \"paginate\"]),\n          f = 0;\n      return function n() {\n        return ie(t)(u || \"\", r(r({}, c), {}, {\n          page: f\n        })).then(function (t) {\n          for (var r = 0, o = Object.entries(t.hits); r < o.length; r++) {\n            var i = a(o[r], 2),\n                u = i[0],\n                c = i[1];\n            if (e(c)) return {\n              object: c,\n              position: parseInt(u, 10),\n              page: f\n            };\n          }\n\n          if (f++, !1 === s || f >= t.nbPages) throw {\n            name: \"ObjectNotFoundError\",\n            message: \"Object not found.\"\n          };\n          return n();\n        });\n      }();\n    };\n  },\n      Wt = function Wt(t) {\n    return function (e, r) {\n      return t.transporter.read({\n        method: x,\n        path: h(\"1/indexes/%s/%s\", t.indexName, e)\n      }, r);\n    };\n  },\n      Bt = function Bt() {\n    return function (t, e) {\n      for (var r = 0, n = Object.entries(t.hits); r < n.length; r++) {\n        var o = a(n[r], 2),\n            i = o[0];\n        if (o[1].objectID === e) return parseInt(i, 10);\n      }\n\n      return -1;\n    };\n  },\n      Qt = function Qt(t) {\n    return function (e, a) {\n      var o = a || {},\n          i = o.attributesToRetrieve,\n          u = n(o, [\"attributesToRetrieve\"]),\n          s = e.map(function (e) {\n        return r({\n          indexName: t.indexName,\n          objectID: e\n        }, i ? {\n          attributesToRetrieve: i\n        } : {});\n      });\n      return t.transporter.read({\n        method: j,\n        path: \"1/indexes/*/objects\",\n        data: {\n          requests: s\n        }\n      }, u);\n    };\n  },\n      Gt = function Gt(t) {\n    return function (e, r) {\n      return t.transporter.read({\n        method: x,\n        path: h(\"1/indexes/%s/rules/%s\", t.indexName, e)\n      }, r);\n    };\n  },\n      Lt = function Lt(t) {\n    return function (e) {\n      return t.transporter.read({\n        method: x,\n        path: h(\"1/indexes/%s/settings\", t.indexName),\n        data: {\n          getVersion: 2\n        }\n      }, e);\n    };\n  },\n      Vt = function Vt(t) {\n    return function (e, r) {\n      return t.transporter.read({\n        method: x,\n        path: h(\"1/indexes/%s/synonyms/%s\", t.indexName, e)\n      }, r);\n    };\n  },\n      _t = function _t(t) {\n    return function (e, r) {\n      return d(Xt(t)([e], r).then(function (t) {\n        return {\n          objectID: t.objectIDs[0],\n          taskID: t.taskIDs[0]\n        };\n      }), function (e, r) {\n        return de(t)(e.taskID, r);\n      });\n    };\n  },\n      Xt = function Xt(t) {\n    return function (e, r) {\n      var a = r || {},\n          o = a.createIfNotExists,\n          i = n(a, [\"createIfNotExists\"]),\n          u = o ? le.PartialUpdateObject : le.PartialUpdateObjectNoCreate;\n      return Tt(t)(e, u, i);\n    };\n  },\n      Yt = function Yt(t) {\n    return function (e, i) {\n      var u = i || {},\n          s = u.safe,\n          c = u.autoGenerateObjectIDIfNotExist,\n          f = u.batchSize,\n          l = n(u, [\"safe\", \"autoGenerateObjectIDIfNotExist\", \"batchSize\"]),\n          p = function p(e, r, n, a) {\n        return d(t.transporter.write({\n          method: j,\n          path: h(\"1/indexes/%s/operation\", e),\n          data: {\n            operation: n,\n            destination: r\n          }\n        }, a), function (e, r) {\n          return de(t)(e.taskID, r);\n        });\n      },\n          m = Math.random().toString(36).substring(7),\n          y = \"\".concat(t.indexName, \"_tmp_\").concat(m),\n          g = ee({\n        appId: t.appId,\n        transporter: t.transporter,\n        indexName: y\n      }),\n          v = [],\n          b = p(t.indexName, y, \"copy\", r(r({}, l), {}, {\n        scope: [\"settings\", \"synonyms\", \"rules\"]\n      }));\n\n      return v.push(b), d((s ? b.wait(l) : b).then(function () {\n        var t = g(e, r(r({}, l), {}, {\n          autoGenerateObjectIDIfNotExist: c,\n          batchSize: f\n        }));\n        return v.push(t), s ? t.wait(l) : t;\n      }).then(function () {\n        var e = p(y, t.indexName, \"move\", l);\n        return v.push(e), s ? e.wait(l) : e;\n      }).then(function () {\n        return Promise.all(v);\n      }).then(function (t) {\n        var e = a(t, 3),\n            r = e[0],\n            n = e[1],\n            i = e[2];\n        return {\n          objectIDs: n.objectIDs,\n          taskIDs: [r.taskID].concat(o(n.taskIDs), [i.taskID])\n        };\n      }), function (t, e) {\n        return Promise.all(v.map(function (t) {\n          return t.wait(e);\n        }));\n      });\n    };\n  },\n      Zt = function Zt(t) {\n    return function (e, n) {\n      return ne(t)(e, r(r({}, n), {}, {\n        clearExistingRules: !0\n      }));\n    };\n  },\n      $t = function $t(t) {\n    return function (e, n) {\n      return oe(t)(e, r(r({}, n), {}, {\n        clearExistingSynonyms: !0\n      }));\n    };\n  },\n      te = function te(t) {\n    return function (e, r) {\n      return d(ee(t)([e], r).then(function (t) {\n        return {\n          objectID: t.objectIDs[0],\n          taskID: t.taskIDs[0]\n        };\n      }), function (e, r) {\n        return de(t)(e.taskID, r);\n      });\n    };\n  },\n      ee = function ee(t) {\n    return function (e, r) {\n      var a = r || {},\n          o = a.autoGenerateObjectIDIfNotExist,\n          i = n(a, [\"autoGenerateObjectIDIfNotExist\"]),\n          u = o ? le.AddObject : le.UpdateObject;\n\n      if (u === le.UpdateObject) {\n        var s = !0,\n            c = !1,\n            f = void 0;\n\n        try {\n          for (var l, p = e[Symbol.iterator](); !(s = (l = p.next()).done); s = !0) {\n            if (void 0 === l.value.objectID) return d(Promise.reject({\n              name: \"MissingObjectIDError\",\n              message: \"All objects must have an unique objectID (like a primary key) to be valid. Algolia is also able to generate objectIDs automatically but *it's not recommended*. To do it, use the `{'autoGenerateObjectIDIfNotExist': true}` option.\"\n            }));\n          }\n        } catch (t) {\n          c = !0, f = t;\n        } finally {\n          try {\n            s || null == p.return || p.return();\n          } finally {\n            if (c) throw f;\n          }\n        }\n      }\n\n      return Tt(t)(e, u, i);\n    };\n  },\n      re = function re(t) {\n    return function (e, r) {\n      return ne(t)([e], r);\n    };\n  },\n      ne = function ne(t) {\n    return function (e, r) {\n      var a = r || {},\n          o = a.forwardToReplicas,\n          i = a.clearExistingRules,\n          u = y(n(a, [\"forwardToReplicas\", \"clearExistingRules\"]));\n      return o && (u.queryParameters.forwardToReplicas = 1), i && (u.queryParameters.clearExistingRules = 1), d(t.transporter.write({\n        method: j,\n        path: h(\"1/indexes/%s/rules/batch\", t.indexName),\n        data: e\n      }, u), function (e, r) {\n        return de(t)(e.taskID, r);\n      });\n    };\n  },\n      ae = function ae(t) {\n    return function (e, r) {\n      return oe(t)([e], r);\n    };\n  },\n      oe = function oe(t) {\n    return function (e, r) {\n      var a = r || {},\n          o = a.forwardToReplicas,\n          i = a.clearExistingSynonyms,\n          u = a.replaceExistingSynonyms,\n          s = y(n(a, [\"forwardToReplicas\", \"clearExistingSynonyms\", \"replaceExistingSynonyms\"]));\n      return o && (s.queryParameters.forwardToReplicas = 1), (u || i) && (s.queryParameters.replaceExistingSynonyms = 1), d(t.transporter.write({\n        method: j,\n        path: h(\"1/indexes/%s/synonyms/batch\", t.indexName),\n        data: e\n      }, s), function (e, r) {\n        return de(t)(e.taskID, r);\n      });\n    };\n  },\n      ie = function ie(t) {\n    return function (e, r) {\n      return t.transporter.read({\n        method: j,\n        path: h(\"1/indexes/%s/query\", t.indexName),\n        data: {\n          query: e\n        },\n        cacheable: !0\n      }, r);\n    };\n  },\n      ue = function ue(t) {\n    return function (e, r, n) {\n      return t.transporter.read({\n        method: j,\n        path: h(\"1/indexes/%s/facets/%s/query\", t.indexName, e),\n        data: {\n          facetQuery: r\n        },\n        cacheable: !0\n      }, n);\n    };\n  },\n      se = function se(t) {\n    return function (e, r) {\n      return t.transporter.read({\n        method: j,\n        path: h(\"1/indexes/%s/rules/search\", t.indexName),\n        data: {\n          query: e\n        }\n      }, r);\n    };\n  },\n      ce = function ce(t) {\n    return function (e, r) {\n      return t.transporter.read({\n        method: j,\n        path: h(\"1/indexes/%s/synonyms/search\", t.indexName),\n        data: {\n          query: e\n        }\n      }, r);\n    };\n  },\n      fe = function fe(t) {\n    return function (e, r) {\n      var a = r || {},\n          o = a.forwardToReplicas,\n          i = y(n(a, [\"forwardToReplicas\"]));\n      return o && (i.queryParameters.forwardToReplicas = 1), d(t.transporter.write({\n        method: D,\n        path: h(\"1/indexes/%s/settings\", t.indexName),\n        data: e\n      }, i), function (e, r) {\n        return de(t)(e.taskID, r);\n      });\n    };\n  },\n      de = function de(t) {\n    return function (e, r) {\n      return f(function (n) {\n        return function (t) {\n          return function (e, r) {\n            return t.transporter.read({\n              method: x,\n              path: h(\"1/indexes/%s/task/%s\", t.indexName, e.toString())\n            }, r);\n          };\n        }(t)(e, r).then(function (t) {\n          return \"published\" !== t.status ? n() : void 0;\n        });\n      });\n    };\n  },\n      le = {\n    AddObject: \"addObject\",\n    UpdateObject: \"updateObject\",\n    PartialUpdateObject: \"partialUpdateObject\",\n    PartialUpdateObjectNoCreate: \"partialUpdateObjectNoCreate\",\n    DeleteObject: \"deleteObject\",\n    DeleteIndex: \"delete\",\n    ClearIndex: \"clear\"\n  },\n      pe = {\n    Settings: \"settings\",\n    Synonyms: \"synonyms\",\n    Rules: \"rules\"\n  },\n      he = 1,\n      me = 2,\n      ye = 3;\n\n  function ge(t, e, n) {\n    var a,\n        o = {\n      appId: t,\n      apiKey: e,\n      timeouts: {\n        connect: 1,\n        read: 2,\n        write: 30\n      },\n      requester: {\n        send: function send(t) {\n          return new Promise(function (e) {\n            var r = new XMLHttpRequest();\n            r.open(t.method, t.url, !0), Object.keys(t.headers).forEach(function (e) {\n              return r.setRequestHeader(e, t.headers[e]);\n            });\n\n            var n,\n                a = function a(t, n) {\n              return setTimeout(function () {\n                r.abort(), e({\n                  status: 0,\n                  content: n,\n                  isTimedOut: !0\n                });\n              }, 1e3 * t);\n            },\n                o = a(t.connectTimeout, \"Connection timeout\");\n\n            r.onreadystatechange = function () {\n              r.readyState > r.OPENED && void 0 === n && (clearTimeout(o), n = a(t.responseTimeout, \"Socket timeout\"));\n            }, r.onerror = function () {\n              0 === r.status && (clearTimeout(o), clearTimeout(n), e({\n                content: r.responseText || \"Network request failed\",\n                status: r.status,\n                isTimedOut: !1\n              }));\n            }, r.onload = function () {\n              clearTimeout(o), clearTimeout(n), e({\n                content: r.responseText,\n                status: r.status,\n                isTimedOut: !1\n              });\n            }, r.send(t.data);\n          });\n        }\n      },\n      logger: (a = ye, {\n        debug: function debug(t, e) {\n          return he >= a && console.debug(t, e), Promise.resolve();\n        },\n        info: function info(t, e) {\n          return me >= a && console.info(t, e), Promise.resolve();\n        },\n        error: function error(t, e) {\n          return console.error(t, e), Promise.resolve();\n        }\n      }),\n      responsesCache: s(),\n      requestsCache: s({\n        serializable: !1\n      }),\n      hostsCache: u({\n        caches: [i({\n          key: \"\".concat(\"4.13.0\", \"-\").concat(t)\n        }), s()]\n      }),\n      userAgent: T(\"4.13.0\").add({\n        segment: \"Browser\"\n      })\n    },\n        f = r(r({}, o), n),\n        d = function d() {\n      return function (t) {\n        return function (t) {\n          var e = t.region || \"us\",\n              n = c(m.WithinHeaders, t.appId, t.apiKey),\n              a = k(r(r({\n            hosts: [{\n              url: \"personalization.\".concat(e, \".algolia.com\")\n            }]\n          }, t), {}, {\n            headers: r(r(r({}, n.headers()), {\n              \"content-type\": \"application/json\"\n            }), t.headers),\n            queryParameters: r(r({}, n.queryParameters()), t.queryParameters)\n          }));\n          return p({\n            appId: t.appId,\n            transporter: a\n          }, t.methods);\n        }(r(r(r({}, o), t), {}, {\n          methods: {\n            getPersonalizationStrategy: H,\n            setPersonalizationStrategy: M\n          }\n        }));\n      };\n    };\n\n    return function (t) {\n      var e = t.appId,\n          n = c(void 0 !== t.authMode ? t.authMode : m.WithinHeaders, e, t.apiKey),\n          a = k(r(r({\n        hosts: [{\n          url: \"\".concat(e, \"-dsn.algolia.net\"),\n          accept: g.Read\n        }, {\n          url: \"\".concat(e, \".algolia.net\"),\n          accept: g.Write\n        }].concat(l([{\n          url: \"\".concat(e, \"-1.algolianet.com\")\n        }, {\n          url: \"\".concat(e, \"-2.algolianet.com\")\n        }, {\n          url: \"\".concat(e, \"-3.algolianet.com\")\n        }]))\n      }, t), {}, {\n        headers: r(r(r({}, n.headers()), {\n          \"content-type\": \"application/x-www-form-urlencoded\"\n        }), t.headers),\n        queryParameters: r(r({}, n.queryParameters()), t.queryParameters)\n      }));\n      return p({\n        transporter: a,\n        appId: e,\n        addAlgoliaAgent: function addAlgoliaAgent(t, e) {\n          a.userAgent.add({\n            segment: t,\n            version: e\n          });\n        },\n        clearCache: function clearCache() {\n          return Promise.all([a.requestsCache.clear(), a.responsesCache.clear()]).then(function () {});\n        }\n      }, t.methods);\n    }(r(r({}, f), {}, {\n      methods: {\n        search: mt,\n        searchForFacetValues: yt,\n        multipleBatch: pt,\n        multipleGetObjects: ht,\n        multipleQueries: mt,\n        copyIndex: L,\n        copySettings: _,\n        copySynonyms: X,\n        copyRules: V,\n        moveIndex: lt,\n        listIndices: ft,\n        getLogs: nt,\n        listClusters: ct,\n        multipleSearchForFacetValues: yt,\n        getApiKey: tt,\n        addApiKey: W,\n        listApiKeys: st,\n        updateApiKey: xt,\n        deleteApiKey: Z,\n        restoreApiKey: bt,\n        assignUserID: B,\n        assignUserIDs: Q,\n        getUserID: ot,\n        searchUserIDs: Ot,\n        listUserIDs: dt,\n        getTopUserIDs: at,\n        removeUserID: gt,\n        hasPendingMappings: it,\n        clearDictionaryEntries: G,\n        deleteDictionaryEntries: $,\n        getDictionarySettings: rt,\n        getAppTask: et,\n        replaceDictionaryEntries: vt,\n        saveDictionaryEntries: Pt,\n        searchDictionaryEntries: wt,\n        setDictionarySettings: It,\n        waitAppTask: jt,\n        customRequest: Y,\n        initIndex: function initIndex(t) {\n          return function (e) {\n            return ut(t)(e, {\n              methods: {\n                batch: Dt,\n                delete: Ct,\n                findAnswers: Mt,\n                getObject: Wt,\n                getObjects: Qt,\n                saveObject: te,\n                saveObjects: ee,\n                search: ie,\n                searchForFacetValues: ue,\n                waitTask: de,\n                setSettings: fe,\n                getSettings: Lt,\n                partialUpdateObject: _t,\n                partialUpdateObjects: Xt,\n                deleteObject: Ut,\n                deleteObjects: zt,\n                deleteBy: At,\n                clearObjects: Nt,\n                browseObjects: qt,\n                getObjectPosition: Bt,\n                findObject: Kt,\n                exists: Ht,\n                saveSynonym: ae,\n                saveSynonyms: oe,\n                getSynonym: Vt,\n                searchSynonyms: ce,\n                browseSynonyms: kt,\n                deleteSynonym: Ft,\n                clearSynonyms: Rt,\n                replaceAllObjects: Yt,\n                replaceAllSynonyms: $t,\n                searchRules: se,\n                getRule: Gt,\n                deleteRule: Jt,\n                saveRule: re,\n                saveRules: ne,\n                replaceAllRules: Zt,\n                browseRules: St,\n                clearRules: Et\n              }\n            });\n          };\n        },\n        initAnalytics: function initAnalytics() {\n          return function (t) {\n            return function (t) {\n              var e = t.region || \"us\",\n                  n = c(m.WithinHeaders, t.appId, t.apiKey),\n                  a = k(r(r({\n                hosts: [{\n                  url: \"analytics.\".concat(e, \".algolia.com\")\n                }]\n              }, t), {}, {\n                headers: r(r(r({}, n.headers()), {\n                  \"content-type\": \"application/json\"\n                }), t.headers),\n                queryParameters: r(r({}, n.queryParameters()), t.queryParameters)\n              }));\n              return p({\n                appId: t.appId,\n                transporter: a\n              }, t.methods);\n            }(r(r(r({}, o), t), {}, {\n              methods: {\n                addABTest: C,\n                getABTest: z,\n                getABTests: J,\n                stopABTest: F,\n                deleteABTest: U\n              }\n            }));\n          };\n        },\n        initPersonalization: d,\n        initRecommendation: function initRecommendation() {\n          return function (t) {\n            return f.logger.info(\"The `initRecommendation` method is deprecated. Use `initPersonalization` instead.\"), d()(t);\n          };\n        }\n      }\n    }));\n  }\n\n  return ge.version = \"4.13.0\", ge;\n});","map":null,"metadata":{},"sourceType":"script"}