{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport PropTypes from 'prop-types';\nimport createConnector from \"../core/createConnector.js\";\nimport { cleanUpValue, refineValue, getCurrentRefinementValue } from \"../core/indexUtils.js\";\n\nfunction getId() {\n  return 'sortBy';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId(props);\n  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, null);\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n\n  return null;\n}\n/**\n * The connectSortBy connector provides the logic to build a widget that will\n *  display a list of indices. This allows a user to change how the hits are being sorted.\n * @name connectSortBy\n * @requirements Algolia handles sorting by creating replica indices. [Read more about sorting](https://www.algolia.com/doc/guides/relevance/sorting/) on\n * the Algolia website.\n * @kind connector\n * @propType {string} defaultRefinement - The default selected index.\n * @propType {{value: string, label: string}[]} items - The list of indexes to search in.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string[]} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{isRefined: boolean, label?: string, value: string}>} items - the list of items the HitsPerPage can display.  If no label provided, the value will be displayed.\n */\n\n\nexport default createConnector({\n  displayName: 'AlgoliaSortBy',\n  propTypes: {\n    defaultRefinement: PropTypes.string,\n    items: PropTypes.arrayOf(PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.string.isRequired\n    })).isRequired,\n    transformItems: PropTypes.func\n  },\n  getProvidedProps: function getProvidedProps(props, searchState) {\n    var currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    var items = props.items.map(function (item) {\n      return item.value === currentRefinement ? _objectSpread(_objectSpread({}, item), {}, {\n        isRefined: true\n      }) : _objectSpread(_objectSpread({}, item), {}, {\n        isRefined: false\n      });\n    });\n    return {\n      items: props.transformItems ? props.transformItems(items) : items,\n      currentRefinement: currentRefinement\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    var id = getId();\n\n    var nextValue = _defineProperty({}, id, nextRefinement);\n\n    var resetPage = true;\n    return refineValue(searchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }, resetPage);\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return cleanUpValue(searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }, getId());\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    var selectedIndex = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    return searchParameters.setIndex(selectedIndex);\n  },\n  getMetadata: function getMetadata() {\n    return {\n      id: getId()\n    };\n  }\n});","map":null,"metadata":{},"sourceType":"module"}