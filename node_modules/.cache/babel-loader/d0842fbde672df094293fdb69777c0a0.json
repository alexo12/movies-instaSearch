{"ast":null,"code":"import _regeneratorRuntime from \"/Users/alex_otero/Documents/personal-projects/algolia/movies-instasearch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/alex_otero/Documents/personal-projects/algolia/movies-instasearch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _createClass from \"/Users/alex_otero/Documents/personal-projects/algolia/movies-instasearch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/alex_otero/Documents/personal-projects/algolia/movies-instasearch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/alex_otero/Documents/personal-projects/algolia/movies-instasearch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/alex_otero/Documents/personal-projects/algolia/movies-instasearch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/alex_otero/Documents/personal-projects/algolia/movies-instasearch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _wrapNativeSuper from \"/Users/alex_otero/Documents/personal-projects/algolia/movies-instasearch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _defineProperty from \"/Users/alex_otero/Documents/personal-projects/algolia/movies-instasearch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/alex_otero/Documents/personal-projects/algolia/movies-instasearch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/alex_otero/Documents/personal-projects/algolia/movies-instasearch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*! MIT License Â© Sindre Sorhus */\nvar globals = {};\nvar globalProperties = ['Headers', 'Request', 'Response', 'ReadableStream', 'fetch', 'AbortController', 'FormData'];\n\nvar _loop = function _loop() {\n  var property = _globalProperties[_i];\n  Object.defineProperty(globals, property, {\n    get: function get() {\n      var value = globalThis[property];\n      return typeof value === 'function' ? value.bind(globalThis) : value;\n    }\n  });\n};\n\nfor (var _i = 0, _globalProperties = globalProperties; _i < _globalProperties.length; _i++) {\n  _loop();\n}\n\nvar isObject = function isObject(value) {\n  return value !== null && typeof value === 'object';\n};\n\nvar supportsAbortController = typeof globals.AbortController === 'function';\nvar supportsStreams = typeof globals.ReadableStream === 'function';\nvar supportsFormData = typeof globals.FormData === 'function';\n\nvar mergeHeaders = function mergeHeaders(source1, source2) {\n  var result = new globals.Headers(source1 || {});\n  var isHeadersInstance = source2 instanceof globals.Headers;\n  var source = new globals.Headers(source2 || {});\n\n  var _iterator = _createForOfIteratorHelper(source),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          key = _step$value[0],\n          value = _step$value[1];\n\n      if (isHeadersInstance && value === 'undefined' || value === undefined) {\n        result.delete(key);\n      } else {\n        result.set(key, value);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return result;\n};\n\nvar deepMerge = function deepMerge() {\n  var returnValue = {};\n  var headers = {};\n\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n\n  for (var _i2 = 0, _sources = sources; _i2 < _sources.length; _i2++) {\n    var source = _sources[_i2];\n\n    if (Array.isArray(source)) {\n      if (!Array.isArray(returnValue)) {\n        returnValue = [];\n      }\n\n      returnValue = [].concat(_toConsumableArray(returnValue), _toConsumableArray(source));\n    } else if (isObject(source)) {\n      for (var _i3 = 0, _Object$entries = Object.entries(source); _i3 < _Object$entries.length; _i3++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i3], 2),\n            key = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n\n        if (isObject(value) && key in returnValue) {\n          value = deepMerge(returnValue[key], value);\n        }\n\n        returnValue = _objectSpread(_objectSpread({}, returnValue), {}, _defineProperty({}, key, value));\n      }\n\n      if (isObject(source.headers)) {\n        headers = mergeHeaders(headers, source.headers);\n      }\n    }\n\n    returnValue.headers = headers;\n  }\n\n  return returnValue;\n};\n\nvar requestMethods = ['get', 'post', 'put', 'patch', 'head', 'delete'];\nvar responseTypes = {\n  json: 'application/json',\n  text: 'text/*',\n  formData: 'multipart/form-data',\n  arrayBuffer: '*/*',\n  blob: '*/*'\n};\nvar retryMethods = ['get', 'put', 'head', 'delete', 'options', 'trace'];\nvar retryStatusCodes = [408, 413, 429, 500, 502, 503, 504];\nvar retryAfterStatusCodes = [413, 429, 503];\nvar stop = Symbol('stop');\n\nvar HTTPError = /*#__PURE__*/function (_Error) {\n  _inherits(HTTPError, _Error);\n\n  var _super = _createSuper(HTTPError);\n\n  function HTTPError(response, request, options) {\n    var _this;\n\n    _classCallCheck(this, HTTPError);\n\n    // Set the message to the status text, such as Unauthorized,\n    // with some fallbacks. This message should never be undefined.\n    _this = _super.call(this, response.statusText || String(response.status === 0 || response.status ? response.status : 'Unknown response error'));\n    _this.name = 'HTTPError';\n    _this.response = response;\n    _this.request = request;\n    _this.options = options;\n    return _this;\n  }\n\n  return _createClass(HTTPError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar TimeoutError = /*#__PURE__*/function (_Error2) {\n  _inherits(TimeoutError, _Error2);\n\n  var _super2 = _createSuper(TimeoutError);\n\n  function TimeoutError(request) {\n    var _this2;\n\n    _classCallCheck(this, TimeoutError);\n\n    _this2 = _super2.call(this, 'Request timed out');\n    _this2.name = 'TimeoutError';\n    _this2.request = request;\n    return _this2;\n  }\n\n  return _createClass(TimeoutError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar delay = function delay(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}; // `Promise.race()` workaround (#91)\n\n\nvar timeout = function timeout(request, abortController, options) {\n  return new Promise(function (resolve, reject) {\n    var timeoutID = setTimeout(function () {\n      if (abortController) {\n        abortController.abort();\n      }\n\n      reject(new TimeoutError(request));\n    }, options.timeout);\n    /* eslint-disable promise/prefer-await-to-then */\n\n    options.fetch(request).then(resolve).catch(reject).then(function () {\n      clearTimeout(timeoutID);\n    });\n    /* eslint-enable promise/prefer-await-to-then */\n  });\n};\n\nvar normalizeRequestMethod = function normalizeRequestMethod(input) {\n  return requestMethods.includes(input) ? input.toUpperCase() : input;\n};\n\nvar defaultRetryOptions = {\n  limit: 2,\n  methods: retryMethods,\n  statusCodes: retryStatusCodes,\n  afterStatusCodes: retryAfterStatusCodes\n};\n\nvar normalizeRetryOptions = function normalizeRetryOptions() {\n  var retry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (typeof retry === 'number') {\n    return _objectSpread(_objectSpread({}, defaultRetryOptions), {}, {\n      limit: retry\n    });\n  }\n\n  if (retry.methods && !Array.isArray(retry.methods)) {\n    throw new Error('retry.methods must be an array');\n  }\n\n  if (retry.statusCodes && !Array.isArray(retry.statusCodes)) {\n    throw new Error('retry.statusCodes must be an array');\n  }\n\n  return _objectSpread(_objectSpread(_objectSpread({}, defaultRetryOptions), retry), {}, {\n    afterStatusCodes: retryAfterStatusCodes\n  });\n}; // The maximum value of a 32bit int (see issue #117)\n\n\nvar maxSafeTimeout = 2147483647;\n\nvar Ky = /*#__PURE__*/function () {\n  function Ky(input) {\n    var _this3 = this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Ky);\n\n    this._retryCount = 0;\n    this._input = input;\n    this._options = _objectSpread(_objectSpread({\n      // TODO: credentials can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n      credentials: this._input.credentials || 'same-origin'\n    }, options), {}, {\n      headers: mergeHeaders(this._input.headers, options.headers),\n      hooks: deepMerge({\n        beforeRequest: [],\n        beforeRetry: [],\n        afterResponse: []\n      }, options.hooks),\n      method: normalizeRequestMethod(options.method || this._input.method),\n      prefixUrl: String(options.prefixUrl || ''),\n      retry: normalizeRetryOptions(options.retry),\n      throwHttpErrors: options.throwHttpErrors !== false,\n      timeout: typeof options.timeout === 'undefined' ? 10000 : options.timeout,\n      fetch: options.fetch || globals.fetch\n    });\n\n    if (typeof this._input !== 'string' && !(this._input instanceof URL || this._input instanceof globals.Request)) {\n      throw new TypeError('`input` must be a string, URL, or Request');\n    }\n\n    if (this._options.prefixUrl && typeof this._input === 'string') {\n      if (this._input.startsWith('/')) {\n        throw new Error('`input` must not begin with a slash when using `prefixUrl`');\n      }\n\n      if (!this._options.prefixUrl.endsWith('/')) {\n        this._options.prefixUrl += '/';\n      }\n\n      this._input = this._options.prefixUrl + this._input;\n    }\n\n    if (supportsAbortController) {\n      this.abortController = new globals.AbortController();\n\n      if (this._options.signal) {\n        this._options.signal.addEventListener('abort', function () {\n          _this3.abortController.abort();\n        });\n      }\n\n      this._options.signal = this.abortController.signal;\n    }\n\n    this.request = new globals.Request(this._input, this._options);\n\n    if (this._options.searchParams) {\n      var searchParams = '?' + new URLSearchParams(this._options.searchParams).toString();\n      var url = this.request.url.replace(/(?:\\?.*?)?(?=#|$)/, searchParams); // To provide correct form boundary, Content-Type header should be deleted each time when new Request instantiated from another one\n\n      if ((supportsFormData && this._options.body instanceof globals.FormData || this._options.body instanceof URLSearchParams) && !(this._options.headers && this._options.headers['content-type'])) {\n        this.request.headers.delete('content-type');\n      }\n\n      this.request = new globals.Request(new globals.Request(url, this.request), this._options);\n    }\n\n    if (this._options.json !== undefined) {\n      this._options.body = JSON.stringify(this._options.json);\n      this.request.headers.set('content-type', 'application/json');\n      this.request = new globals.Request(this.request, {\n        body: this._options.body\n      });\n    }\n\n    var fn = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response, _iterator2, _step2, hook, modifiedResponse;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(_this3._options.timeout > maxSafeTimeout)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new RangeError(\"The `timeout` option cannot be greater than \".concat(maxSafeTimeout));\n\n              case 2:\n                _context.next = 4;\n                return delay(1);\n\n              case 4:\n                _context.next = 6;\n                return _this3._fetch();\n\n              case 6:\n                response = _context.sent;\n                _iterator2 = _createForOfIteratorHelper(_this3._options.hooks.afterResponse);\n                _context.prev = 8;\n\n                _iterator2.s();\n\n              case 10:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context.next = 18;\n                  break;\n                }\n\n                hook = _step2.value;\n                _context.next = 14;\n                return hook(_this3.request, _this3._options, _this3._decorateResponse(response.clone()));\n\n              case 14:\n                modifiedResponse = _context.sent;\n\n                if (modifiedResponse instanceof globals.Response) {\n                  response = modifiedResponse;\n                }\n\n              case 16:\n                _context.next = 10;\n                break;\n\n              case 18:\n                _context.next = 23;\n                break;\n\n              case 20:\n                _context.prev = 20;\n                _context.t0 = _context[\"catch\"](8);\n\n                _iterator2.e(_context.t0);\n\n              case 23:\n                _context.prev = 23;\n\n                _iterator2.f();\n\n                return _context.finish(23);\n\n              case 26:\n                _this3._decorateResponse(response);\n\n                if (!(!response.ok && _this3._options.throwHttpErrors)) {\n                  _context.next = 29;\n                  break;\n                }\n\n                throw new HTTPError(response, _this3.request, _this3._options);\n\n              case 29:\n                if (!_this3._options.onDownloadProgress) {\n                  _context.next = 35;\n                  break;\n                }\n\n                if (!(typeof _this3._options.onDownloadProgress !== 'function')) {\n                  _context.next = 32;\n                  break;\n                }\n\n                throw new TypeError('The `onDownloadProgress` option must be a function');\n\n              case 32:\n                if (supportsStreams) {\n                  _context.next = 34;\n                  break;\n                }\n\n                throw new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n\n              case 34:\n                return _context.abrupt(\"return\", _this3._stream(response.clone(), _this3._options.onDownloadProgress));\n\n              case 35:\n                return _context.abrupt(\"return\", response);\n\n              case 36:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[8, 20, 23, 26]]);\n      }));\n\n      return function fn() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    var isRetriableMethod = this._options.retry.methods.includes(this.request.method.toLowerCase());\n\n    var result = isRetriableMethod ? this._retry(fn) : fn();\n\n    var _loop2 = function _loop2() {\n      var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i4], 2),\n          type = _Object$entries2$_i[0],\n          mimeType = _Object$entries2$_i[1];\n\n      result[type] = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this3.request.headers.set('accept', _this3.request.headers.get('accept') || mimeType);\n\n                _context2.next = 3;\n                return result;\n\n              case 3:\n                response = _context2.sent.clone();\n\n                if (!(type === 'json')) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                if (!(response.status === 204)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", '');\n\n              case 7:\n                if (!options.parseJson) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                _context2.t0 = options;\n                _context2.next = 11;\n                return response.text();\n\n              case 11:\n                _context2.t1 = _context2.sent;\n                return _context2.abrupt(\"return\", _context2.t0.parseJson.call(_context2.t0, _context2.t1));\n\n              case 13:\n                return _context2.abrupt(\"return\", response[type]());\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    };\n\n    for (var _i4 = 0, _Object$entries2 = Object.entries(responseTypes); _i4 < _Object$entries2.length; _i4++) {\n      _loop2();\n    }\n\n    return result;\n  }\n\n  _createClass(Ky, [{\n    key: \"_calculateRetryDelay\",\n    value: function _calculateRetryDelay(error) {\n      this._retryCount++;\n\n      if (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {\n        if (error instanceof HTTPError) {\n          if (!this._options.retry.statusCodes.includes(error.response.status)) {\n            return 0;\n          }\n\n          var retryAfter = error.response.headers.get('Retry-After');\n\n          if (retryAfter && this._options.retry.afterStatusCodes.includes(error.response.status)) {\n            var after = Number(retryAfter);\n\n            if (Number.isNaN(after)) {\n              after = Date.parse(retryAfter) - Date.now();\n            } else {\n              after *= 1000;\n            }\n\n            if (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {\n              return 0;\n            }\n\n            return after;\n          }\n\n          if (error.response.status === 413) {\n            return 0;\n          }\n        }\n\n        var BACKOFF_FACTOR = 0.3;\n        return BACKOFF_FACTOR * Math.pow(2, this._retryCount - 1) * 1000;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"_decorateResponse\",\n    value: function _decorateResponse(response) {\n      var _this4 = this;\n\n      if (this._options.parseJson) {\n        response.json = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.t0 = _this4._options;\n                  _context3.next = 3;\n                  return response.text();\n\n                case 3:\n                  _context3.t1 = _context3.sent;\n                  return _context3.abrupt(\"return\", _context3.t0.parseJson.call(_context3.t0, _context3.t1));\n\n                case 5:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n      }\n\n      return response;\n    }\n  }, {\n    key: \"_retry\",\n    value: function () {\n      var _retry2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(fn) {\n        var ms, _iterator3, _step3, hook, hookResult;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return fn();\n\n              case 3:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 6:\n                _context4.prev = 6;\n                _context4.t0 = _context4[\"catch\"](0);\n                ms = Math.min(this._calculateRetryDelay(_context4.t0), maxSafeTimeout);\n\n                if (!(ms !== 0 && this._retryCount > 0)) {\n                  _context4.next = 33;\n                  break;\n                }\n\n                _context4.next = 12;\n                return delay(ms);\n\n              case 12:\n                _iterator3 = _createForOfIteratorHelper(this._options.hooks.beforeRetry);\n                _context4.prev = 13;\n\n                _iterator3.s();\n\n              case 15:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context4.next = 24;\n                  break;\n                }\n\n                hook = _step3.value;\n                _context4.next = 19;\n                return hook({\n                  request: this.request,\n                  options: this._options,\n                  error: _context4.t0,\n                  retryCount: this._retryCount\n                });\n\n              case 19:\n                hookResult = _context4.sent;\n\n                if (!(hookResult === stop)) {\n                  _context4.next = 22;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 22:\n                _context4.next = 15;\n                break;\n\n              case 24:\n                _context4.next = 29;\n                break;\n\n              case 26:\n                _context4.prev = 26;\n                _context4.t1 = _context4[\"catch\"](13);\n\n                _iterator3.e(_context4.t1);\n\n              case 29:\n                _context4.prev = 29;\n\n                _iterator3.f();\n\n                return _context4.finish(29);\n\n              case 32:\n                return _context4.abrupt(\"return\", this._retry(fn));\n\n              case 33:\n                if (!this._options.throwHttpErrors) {\n                  _context4.next = 35;\n                  break;\n                }\n\n                throw _context4.t0;\n\n              case 35:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 6], [13, 26, 29, 32]]);\n      }));\n\n      function _retry(_x) {\n        return _retry2.apply(this, arguments);\n      }\n\n      return _retry;\n    }()\n  }, {\n    key: \"_fetch\",\n    value: function () {\n      var _fetch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _iterator4, _step4, hook, result;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _iterator4 = _createForOfIteratorHelper(this._options.hooks.beforeRequest);\n                _context5.prev = 1;\n\n                _iterator4.s();\n\n              case 3:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context5.next = 15;\n                  break;\n                }\n\n                hook = _step4.value;\n                _context5.next = 7;\n                return hook(this.request, this._options);\n\n              case 7:\n                result = _context5.sent;\n\n                if (!(result instanceof Request)) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                this.request = result;\n                return _context5.abrupt(\"break\", 15);\n\n              case 11:\n                if (!(result instanceof Response)) {\n                  _context5.next = 13;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", result);\n\n              case 13:\n                _context5.next = 3;\n                break;\n\n              case 15:\n                _context5.next = 20;\n                break;\n\n              case 17:\n                _context5.prev = 17;\n                _context5.t0 = _context5[\"catch\"](1);\n\n                _iterator4.e(_context5.t0);\n\n              case 20:\n                _context5.prev = 20;\n\n                _iterator4.f();\n\n                return _context5.finish(20);\n\n              case 23:\n                if (!(this._options.timeout === false)) {\n                  _context5.next = 25;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", this._options.fetch(this.request.clone()));\n\n              case 25:\n                return _context5.abrupt(\"return\", timeout(this.request.clone(), this.abortController, this._options));\n\n              case 26:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[1, 17, 20, 23]]);\n      }));\n\n      function _fetch() {\n        return _fetch2.apply(this, arguments);\n      }\n\n      return _fetch;\n    }()\n    /* istanbul ignore next */\n\n  }, {\n    key: \"_stream\",\n    value: function _stream(response, onDownloadProgress) {\n      var totalBytes = Number(response.headers.get('content-length')) || 0;\n      var transferredBytes = 0;\n      return new globals.Response(new globals.ReadableStream({\n        start: function () {\n          var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(controller) {\n            var reader, read, _read;\n\n            return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    _read = function _read3() {\n                      _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n                        var _yield$reader$read, done, value, percent;\n\n                        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                          while (1) {\n                            switch (_context6.prev = _context6.next) {\n                              case 0:\n                                _context6.next = 2;\n                                return reader.read();\n\n                              case 2:\n                                _yield$reader$read = _context6.sent;\n                                done = _yield$reader$read.done;\n                                value = _yield$reader$read.value;\n\n                                if (!done) {\n                                  _context6.next = 8;\n                                  break;\n                                }\n\n                                controller.close();\n                                return _context6.abrupt(\"return\");\n\n                              case 8:\n                                if (onDownloadProgress) {\n                                  transferredBytes += value.byteLength;\n                                  percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n                                  onDownloadProgress({\n                                    percent: percent,\n                                    transferredBytes: transferredBytes,\n                                    totalBytes: totalBytes\n                                  }, value);\n                                }\n\n                                controller.enqueue(value);\n                                _context6.next = 12;\n                                return read();\n\n                              case 12:\n                              case \"end\":\n                                return _context6.stop();\n                            }\n                          }\n                        }, _callee6);\n                      }));\n                      return _read.apply(this, arguments);\n                    };\n\n                    read = function _read2() {\n                      return _read.apply(this, arguments);\n                    };\n\n                    reader = response.body.getReader();\n\n                    if (onDownloadProgress) {\n                      onDownloadProgress({\n                        percent: 0,\n                        transferredBytes: 0,\n                        totalBytes: totalBytes\n                      }, new Uint8Array());\n                    }\n\n                    _context7.next = 6;\n                    return read();\n\n                  case 6:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _callee7);\n          }));\n\n          function start(_x2) {\n            return _start.apply(this, arguments);\n          }\n\n          return start;\n        }()\n      }));\n    }\n  }]);\n\n  return Ky;\n}();\n\nvar validateAndMerge = function validateAndMerge() {\n  for (var _len2 = arguments.length, sources = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    sources[_key2] = arguments[_key2];\n  }\n\n  for (var _i5 = 0, _sources2 = sources; _i5 < _sources2.length; _i5++) {\n    var source = _sources2[_i5];\n\n    if ((!isObject(source) || Array.isArray(source)) && typeof source !== 'undefined') {\n      throw new TypeError('The `options` argument must be an object');\n    }\n  }\n\n  return deepMerge.apply(void 0, [{}].concat(sources));\n};\n\nvar createInstance = function createInstance(defaults) {\n  var ky = function ky(input, options) {\n    return new Ky(input, validateAndMerge(defaults, options));\n  };\n\n  var _iterator5 = _createForOfIteratorHelper(requestMethods),\n      _step5;\n\n  try {\n    var _loop3 = function _loop3() {\n      var method = _step5.value;\n\n      ky[method] = function (input, options) {\n        return new Ky(input, validateAndMerge(defaults, options, {\n          method: method\n        }));\n      };\n    };\n\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      _loop3();\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n\n  ky.HTTPError = HTTPError;\n  ky.TimeoutError = TimeoutError;\n\n  ky.create = function (newDefaults) {\n    return createInstance(validateAndMerge(newDefaults));\n  };\n\n  ky.extend = function (newDefaults) {\n    return createInstance(validateAndMerge(defaults, newDefaults));\n  };\n\n  ky.stop = stop;\n  return ky;\n};\n\nvar ky = createInstance();\nexport default ky;","map":null,"metadata":{},"sourceType":"module"}